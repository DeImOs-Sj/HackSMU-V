import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import contractAbi from './contracts/MultiSignatureBillValidation.json';

function App() {
  const [billId, setBillId] = useState('');
  const [billData, setBillData] = useState('');
  const [initialOwners, setInitialOwners] = useState('');
  const [contract, setContract] = useState(null);

  useEffect(() => {
    initializeContract();
  }, []);

  const requestAccount = async () => {
    await window.ethereum.request({ method: 'eth_requestAccounts' });
  };

  const initializeContract = async () => {
    try {
      await requestAccount();
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner(); // Get the signer (usually from MetaMask)
      const contractAddress = '0x0c8f42Fd6B5F00Fd599FFe01F35F8A28Dd06659D';

      const multisigContract = new ethers.Contract(contractAddress, contractAbi, signer);

      setContract(multisigContract);
    } catch (error) {
      console.error('Error connecting to MetaMask:', error);
    }
  };


  const uploadBill = async () => {
    if (!contract) return;

    const parsedInitialOwners = initialOwners.split(',').map(address => address.trim());

    try {
      await contract.uploadBill(billId, billData, parsedInitialOwners);
      console.log('Bill uploaded successfully.');
    } catch (error) {
      console.error('Error uploading bill:', error);
    }
  };

  const approveBill = async () => {
    if (!contract) return;

    try {
      await contract.approveBill(billId);
      console.log('Bill approved successfully.');
    } catch (error) {
      console.error('Error approving bill:', error);
    }
  };

  const checkApprovalStatus = async () => {
    if (!contract) return;

    try {
      const isApproved = await contract.isBillApproved(billId);
      if (isApproved) {
        console.log('Bill is approved.');
      } else {
        console.log('Bill is not approved.');
      }
    } catch (error) {
      console.error('Error checking approval status:', error);
    }
  };

  return (
    <div className="flex justify-center items-center h-screen">
      <div className="bg-white p-8 rounded shadow-md w-96">
        <h2 className="text-2xl font-semibold mb-4">Upload Bill</h2>
        <input
          className="mb-2 w-full px-3 py-2 border rounded"
          type="text"
          placeholder="Bill ID"
          value={billId}
          onChange={(e) => setBillId(e.target.value)}
        />
        <textarea
          className="mb-2 w-full px-3 py-2 border rounded"
          rows="4"
          placeholder="Bill Data"
          value={billData}
          onChange={(e) => setBillData(e.target.value)}
        />
        <input
          className="mb-2 w-full px-3 py-2 border rounded"
          type="text"
          placeholder="Initial Owners (comma-separated)"
          value={initialOwners}
          onChange={(e) => setInitialOwners(e.target.value)}
        />
        <button
          className="w-full bg-blue-500 text-white p-2 rounded"
          onClick={uploadBill}
        >
          Upload Bill
        </button>
        <button
          className="w-full bg-yellow-500 text-white p-2 rounded mt-2"
          onClick={checkApprovalStatus}
        >
          Check Approval Status
        </button>
        <button
          className="w-full bg-green-500 text-white p-2 rounded mt-2"
          onClick={approveBill}
        >
          Approve Bill
        </button>
      </div>
    </div>
  );
}

export default App;
